{"version":3,"sources":["assets/leftArrow.svg","assets/searchIcon.svg","components/Game/GameContent.tsx","assets/androidLogo.svg","assets/iOSLogo.svg","assets/linuxLogo.svg","assets/macLogo.svg","assets/nintendoSwitchLogo.svg","assets/playstationLogo.svg","assets/stadiaLogo.svg","assets/windowsLogo.svg","assets/windowsPhoneLogo.svg","assets/xboxLogo.svg","components/Game/GameHeader.tsx","components/Game/GameMedia.tsx","api/GamesAPI.ts","hooks/useFetchGameData.ts","pages/Game.tsx","pages/Landing.tsx","hooks/useFetchSearchResult.ts","pages/SearchResult.tsx","App.tsx","index.tsx"],"names":["GameContent","props","className","summary","storyline","developers","map","developer","company","name","id","publishers","publisher","platforms","platform","releaseDates","releaseDate","Date","date","toLocaleDateString","GameHeader","style","backgroundScreenshot","url","backgroundImage","replace","undefined","firstReleaseDate","alreadyDisplayedLogos","brandPlatformLogo","linuxLogo","windowsLogo","playstationLogo","xboxLogo","macLogo","androidLogo","iOSLogo","windowsPhoneLogo","nintendoSwitchLogo","stadiaLogo","getBrandPlatformLogo","includes","push","src","alt","displayGamePlatforms","GameMedia","centeredSlides","slidesPerView","spaceBetween","slidesPerGroup","loop","pagination","clickable","navigation","breakpoints","screenshots","concat","artworks","media","SwiperCore","use","Pagination","Navigation","searchInput","cancelToken","a","axios","get","gameId","useFetchGameData","useState","isPending","setIsPending","setName","setPlatforms","setDevelopers","setPublishers","setFirstReleaseDate","setReleaseDates","storyLine","setStoryLine","setSummary","setArtworks","setScreenShots","websites","setWebsites","useEffect","source","CancelToken","getGameRelevantData","token","then","res","data","involved_companies","filter","involvedCompany","first_release_date","release_dates","catch","error","isCancel","console","log","cancel","Game","history","useHistory","gameData","useParams","onClick","goBack","leftArrow","searchIcon","Math","floor","random","length","Landing","inputValue","setInputValue","onSubmit","event","preventDefault","type","placeholder","value","onChange","target","useFetchSearchResult","resultGames","setResultGames","searchGame","SearchResult","game","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a2e0639.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/leftArrow.6b29b10c.svg\";","export default __webpack_public_path__ + \"static/media/searchIcon.518d9536.svg\";","import '../../style/Game/GameContent.css'\r\n\r\n/**\r\n * Defines the types of the GameContent props\r\n */\r\ninterface GameContentProps {\r\n  summary: string\r\n  storyline: string\r\n  developers: {\r\n    id: number\r\n    company: { name: string }\r\n  }[]\r\n  publishers: {\r\n    id: number\r\n    company: { name: string }\r\n  }[]\r\n  websites: {\r\n    id: number\r\n    url: string\r\n  }[]\r\n  platforms: {\r\n    id: number\r\n    name: string\r\n  }[]\r\n  releaseDates: {\r\n    id: number\r\n    date: number\r\n    platform: { name: string }\r\n  }[]\r\n}\r\n\r\n/**\r\n * Component displaying the content part of the game page in the application\r\n * @param props the component props\r\n * @returns the JSX element displaying the component\r\n */\r\nexport default function GameContent(props: GameContentProps): JSX.Element {\r\n  return (\r\n    <>\r\n      <div className=\"GameContent\">\r\n        <div className=\"GameContentAbout\">\r\n          <h4>About</h4>\r\n          <p>{props.summary}</p>\r\n          <p>{props.storyline}</p>\r\n        </div>\r\n        <div className=\"GameContentDetails\">\r\n          <div className=\"GameContentDevelopers\">\r\n            <h4>Developers</h4>\r\n            {props.developers.map((developer) => (\r\n              <p key={developer.id}>{developer.company.name}</p>\r\n            ))}\r\n          </div>\r\n          <div className=\"GameContentPublishers\">\r\n            <h4>Publishers</h4>\r\n            {props.publishers.map((publisher) => (\r\n              <p key={publisher.id}>{publisher.company.name}</p>\r\n            ))}\r\n          </div>\r\n          <div className=\"GameContentPlatforms\">\r\n            <h4>Platforms</h4>\r\n            {props.platforms.map((platform) => (\r\n              <p key={platform.id}>{platform.name}</p>\r\n            ))}\r\n          </div>\r\n          <div className=\"GameContentReleaseDates\">\r\n            <h4>Release dates</h4>\r\n            {props.releaseDates.map((releaseDate) => (\r\n              <p key={releaseDate.id}>\r\n                {`${new Date(releaseDate.date * 1000).toLocaleDateString()} - ${\r\n                  releaseDate.platform.name\r\n                }`}\r\n              </p>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/androidLogo.93003ad1.svg\";","export default __webpack_public_path__ + \"static/media/iOSLogo.410cc8fe.svg\";","export default __webpack_public_path__ + \"static/media/linuxLogo.65a5d2be.svg\";","export default __webpack_public_path__ + \"static/media/macLogo.5c1789f5.svg\";","export default __webpack_public_path__ + \"static/media/nintendoSwitchLogo.4e6c5c1d.svg\";","export default __webpack_public_path__ + \"static/media/playstationLogo.d1941941.svg\";","export default __webpack_public_path__ + \"static/media/stadiaLogo.d68715b3.svg\";","export default __webpack_public_path__ + \"static/media/windowsLogo.0debd84f.svg\";","export default __webpack_public_path__ + \"static/media/windowsPhoneLogo.d77e6762.svg\";","export default __webpack_public_path__ + \"static/media/xboxLogo.f8d6809e.svg\";","import androidLogo from '../../assets/androidLogo.svg'\r\nimport iOSLogo from '../../assets/iOSLogo.svg'\r\nimport linuxLogo from '../../assets/linuxLogo.svg'\r\nimport macLogo from '../../assets/macLogo.svg'\r\nimport nintendoSwitchLogo from '../../assets/nintendoSwitchLogo.svg'\r\nimport playstationLogo from '../../assets/playstationLogo.svg'\r\nimport stadiaLogo from '../../assets/stadiaLogo.svg'\r\nimport windowsLogo from '../../assets/windowsLogo.svg'\r\nimport windowsPhoneLogo from '../../assets/windowsPhoneLogo.svg'\r\nimport xboxLogo from '../../assets/xboxLogo.svg'\r\nimport '../../style/Game/GameHeader.css'\r\n\r\n/**\r\n * Defines the types of the GameHeader props\r\n */\r\ninterface GameHeaderProps {\r\n  name: string\r\n  platforms: {\r\n    id: number\r\n    name: string\r\n  }[]\r\n  firstReleaseDate: Date\r\n  backgroundScreenshot: { id: number; url: string }\r\n}\r\n\r\n/**\r\n * Component displaying the header part of the game page\r\n * @param props the component props\r\n * @returns the JSX element displaying the component\r\n */\r\nexport default function GameHeader(props: GameHeaderProps): JSX.Element {\r\n  /**\r\n   * Return the path of a platform logo associated to the given platform id\r\n   * @param id the platform id to get the logo for\r\n   * @returns the path of the platform logo or undefined if there's no logo\r\n   */\r\n  const getBrandPlatformLogo = (id: number) => {\r\n    switch (id) {\r\n      case 3: // Linux\r\n        return linuxLogo\r\n      case 6: // PC Windows\r\n        return windowsLogo\r\n      case 9: // Playstation 3\r\n      case 48: // PlayStation 4\r\n      case 167: // Playstation 5\r\n        return playstationLogo\r\n      case 12: // XBox 360\r\n      case 49: // XBox One\r\n      case 169: // XBox Series\r\n        return xboxLogo\r\n      case 14: // Mac\r\n        return macLogo\r\n      case 34: // Android\r\n        return androidLogo\r\n      case 39: // iOS\r\n        return iOSLogo\r\n      case 74: // Windows Phone\r\n        return windowsPhoneLogo\r\n      case 130: // Nintendo Switch\r\n        return nintendoSwitchLogo\r\n      case 170: // Google Stadia\r\n        return stadiaLogo\r\n      default:\r\n        return undefined\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an element containing the game platforms information as logos if they're found or names if not.\r\n   * It also makes sure that only one logo is displayed for multiple platforms belonging to the same console series (Xbox, Playstation, ...)\r\n   * @param platforms the game platforms array\r\n   * @returns the JSX element displaying the game platforms information\r\n   */\r\n  const displayGamePlatforms = (\r\n    platforms: {\r\n      id: number\r\n      name: string\r\n    }[]\r\n  ) => {\r\n    const alreadyDisplayedLogos: string[] = []\r\n    return (\r\n      <>\r\n        {platforms.map((platform) => {\r\n          const brandPlatformLogo = getBrandPlatformLogo(platform.id)\r\n          if (!brandPlatformLogo) {\r\n            return (\r\n              <span key={platform.id}>\r\n                {platform.name}\r\n                {platform.id}\r\n              </span>\r\n            )\r\n          } else if (\r\n            brandPlatformLogo &&\r\n            !alreadyDisplayedLogos.includes(brandPlatformLogo)\r\n          ) {\r\n            alreadyDisplayedLogos.push(brandPlatformLogo)\r\n            return (\r\n              <span key={platform.id}>\r\n                <img src={brandPlatformLogo} alt=\"platform logo\" />\r\n              </span>\r\n            )\r\n          }\r\n        })}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"GameHeader\">\r\n      <div\r\n        className=\"GameHeaderBackground\"\r\n        style={\r\n          props.backgroundScreenshot && props.backgroundScreenshot.url\r\n            ? {\r\n                backgroundImage: `url(${props.backgroundScreenshot.url.replace(\r\n                  'thumb',\r\n                  '1080p'\r\n                )})`,\r\n              }\r\n            : undefined\r\n        }\r\n      />\r\n      <div className=\"GameHeaderBackgroundFade\" />\r\n      <h1>{props.name}</h1>\r\n      <div className=\"GameHeaderAdditionalInformation\">\r\n        <div className=\"GameHeaderFirstReleaseDate\">\r\n          {new Date(props.firstReleaseDate).toLocaleDateString()}\r\n        </div>\r\n        <div className=\"GameHeaderPlatforms\">\r\n          {displayGamePlatforms(props.platforms)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import SwiperCore, { Navigation, Pagination } from 'swiper/core'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport 'swiper/swiper-bundle.css'\r\nimport '../../style/Game/GameMedia.css'\r\n\r\n// Installs the needed Swiper modules\r\nSwiperCore.use([Pagination, Navigation])\r\n\r\n/**\r\n * Defines the types of the GameHeader props\r\n */\r\ninterface GameMediaProps {\r\n  screenshots: { id: number; url: string }[]\r\n  artworks: { id: number; url: string }[]\r\n}\r\n\r\n/**\r\n * Component displaying the media part of the game page\r\n * @param props the component props\r\n * @returns the JSX element displaying the component\r\n */\r\nexport default function GameMedia(props: GameMediaProps): JSX.Element {\r\n  return (\r\n    <div className=\"GameMedia\">\r\n      <Swiper\r\n        centeredSlides\r\n        slidesPerView={2}\r\n        spaceBetween={16}\r\n        slidesPerGroup={1}\r\n        loop={true}\r\n        pagination={{\r\n          clickable: true,\r\n        }}\r\n        navigation={true}\r\n        breakpoints={{\r\n          '768': {\r\n            slidesPerView: 4,\r\n          },\r\n        }}\r\n      >\r\n        {props.screenshots.concat(props.artworks).map((media) => (\r\n          <SwiperSlide key={media.id}>\r\n            <img\r\n              src={media.url.replace('thumb', '1080p')}\r\n              alt=\"Game media image\"\r\n            />\r\n          </SwiperSlide>\r\n        ))}\r\n      </Swiper>\r\n    </div>\r\n  )\r\n}\r\n","import axios, { AxiosResponse, CancelToken } from 'axios'\r\n\r\n/**\r\n * Sends a request to search for a game by name with the given string in the IGDB database\r\n * @param searchInput the input string to search the game with\r\n * @param cancelToken the cancel token used to cancel the request if needed\r\n * @returns the Promise of the axios response\r\n */\r\nexport async function searchGame(\r\n  searchInput: string,\r\n  cancelToken: CancelToken\r\n): Promise<AxiosResponse<{ id: number; name: string }[]>> {\r\n  return axios.get(\r\n    `https://igdb-search.herokuapp.com/games/search/${searchInput}`,\r\n    { cancelToken: cancelToken }\r\n  )\r\n}\r\n\r\n/**\r\n * Sends a request to get relevant data for the game identified by the given id in the IGDB database\r\n * @param gameId the game id to search for in the IGDB database\r\n * @param cancelToken the cancel token used to cancel the request if needed\r\n * @returns the Promise of the axios response\r\n */\r\nexport async function getGameRelevantData(\r\n  gameId: string,\r\n  cancelToken: CancelToken\r\n): Promise<\r\n  AxiosResponse<\r\n    {\r\n      name: string\r\n      platforms: {\r\n        id: number\r\n        name: string\r\n      }[]\r\n      involved_companies: {\r\n        id: number\r\n        company: {\r\n          name: string\r\n        }\r\n        developer: boolean\r\n        publisher: boolean\r\n      }[]\r\n      first_release_date: number\r\n      release_dates: {\r\n        id: number\r\n        date: number\r\n        platform: {\r\n          name: string\r\n        }\r\n      }[]\r\n      storyline: string\r\n      summary: string\r\n      artworks: {\r\n        id: number\r\n        url: string\r\n      }[]\r\n      screenshots: {\r\n        id: number\r\n        url: string\r\n      }[]\r\n      websites: {\r\n        id: number\r\n        url: string\r\n      }[]\r\n    }[]\r\n  >\r\n> {\r\n  return axios.get(\r\n    `https://igdb-search.herokuapp.com/games/${gameId}/relevantInfo`,\r\n    {\r\n      cancelToken: cancelToken,\r\n    }\r\n  )\r\n}\r\n","import axios from 'axios'\r\nimport { useEffect, useState } from 'react'\r\nimport { getGameRelevantData } from '../api/GamesAPI'\r\n\r\n/**\r\n * Custom hook used to fetch data from a game identified by the given id\r\n * @param gameId the game id to fetch data from\r\n * @returns an object containing all the relevant game data and a pending state\r\n */\r\nexport default function useFetchGameData(\r\n  gameId: string\r\n): {\r\n  isPending: boolean\r\n  name: string\r\n  platforms: {\r\n    id: number\r\n    name: string\r\n  }[]\r\n  developers: {\r\n    id: number\r\n    company: { name: string }\r\n  }[]\r\n  publishers: { id: number; company: { name: string } }[]\r\n  firstReleaseDate: Date\r\n  releaseDates: {\r\n    id: number\r\n    date: number\r\n    platform: { name: string }\r\n  }[]\r\n  storyLine: string\r\n  summary: string\r\n  artworks: {\r\n    id: number\r\n    url: string\r\n  }[]\r\n  screenshots: {\r\n    id: number\r\n    url: string\r\n  }[]\r\n  websites: {\r\n    id: number\r\n    url: string\r\n  }[]\r\n} {\r\n  const [isPending, setIsPending] = useState(true)\r\n  const [name, setName] = useState('')\r\n  const [platforms, setPlatforms] = useState<{ id: number; name: string }[]>([])\r\n  const [developers, setDevelopers] = useState<\r\n    { id: number; company: { name: string } }[]\r\n  >([])\r\n  const [publishers, setPublishers] = useState<\r\n    { id: number; company: { name: string } }[]\r\n  >([])\r\n  const [firstReleaseDate, setFirstReleaseDate] = useState(new Date())\r\n  const [releaseDates, setReleaseDates] = useState<\r\n    { id: number; date: number; platform: { name: string } }[]\r\n  >([])\r\n  const [storyLine, setStoryLine] = useState('')\r\n  const [summary, setSummary] = useState('')\r\n  const [artworks, setArtworks] = useState<{ id: number; url: string }[]>([])\r\n  const [screenshots, setScreenShots] = useState<{ id: number; url: string }[]>(\r\n    []\r\n  )\r\n  const [websites, setWebsites] = useState<{ id: number; url: string }[]>([])\r\n\r\n  useEffect(() => {\r\n    const source = axios.CancelToken.source()\r\n    getGameRelevantData(gameId, source.token)\r\n      .then((res) => {\r\n        if (res.data[0].name) setName(res.data[0].name)\r\n        if (res.data[0].platforms) setPlatforms(res.data[0].platforms)\r\n        if (res.data[0].involved_companies)\r\n          setDevelopers(\r\n            res.data[0].involved_companies.filter(\r\n              (involvedCompany: { developer: boolean }) =>\r\n                involvedCompany.developer\r\n            )\r\n          )\r\n        if (res.data[0].involved_companies)\r\n          setPublishers(\r\n            res.data[0].involved_companies.filter(\r\n              (involvedCompany: { publisher: boolean }) =>\r\n                involvedCompany.publisher\r\n            )\r\n          )\r\n        if (res.data[0].first_release_date)\r\n          setFirstReleaseDate(new Date(res.data[0].first_release_date * 1000))\r\n        if (res.data[0].release_dates)\r\n          setReleaseDates(res.data[0].release_dates)\r\n        if (res.data[0].storyline) setStoryLine(res.data[0].storyline)\r\n        if (res.data[0].summary) setSummary(res.data[0].summary)\r\n        if (res.data[0].artworks) setArtworks(res.data[0].artworks)\r\n        if (res.data[0].screenshots) setScreenShots(res.data[0].screenshots)\r\n        if (res.data[0].websites) setWebsites(res.data[0].websites)\r\n        setIsPending(false)\r\n      })\r\n      .catch((error) => {\r\n        if (!axios.isCancel(error)) {\r\n          console.log(error)\r\n        }\r\n      })\r\n\r\n    return () => {\r\n      source.cancel('Operation canceled for cleanup')\r\n    }\r\n  }, [gameId])\r\n\r\n  return {\r\n    isPending,\r\n    name,\r\n    platforms,\r\n    developers,\r\n    publishers,\r\n    firstReleaseDate,\r\n    releaseDates,\r\n    storyLine,\r\n    summary,\r\n    artworks,\r\n    screenshots,\r\n    websites,\r\n  }\r\n}\r\n","import { useHistory, useParams } from 'react-router-dom'\r\nimport leftArrow from '../assets/leftArrow.svg'\r\nimport searchIcon from '../assets/searchIcon.svg'\r\nimport GameContent from '../components/Game/GameContent'\r\nimport GameHeader from '../components/Game/GameHeader'\r\nimport GameMedia from '../components/Game/GameMedia'\r\nimport useFetchGameData from '../hooks/useFetchGameData'\r\nimport '../style/Game/Game.css'\r\n\r\n/**\r\n * Component displaying the game page in the application\r\n * @returns the JSX element displaying the component\r\n */\r\nexport default function Game(): JSX.Element {\r\n  const history = useHistory()\r\n  const { gameId } = useParams<{ gameId: string }>()\r\n  const gameData = useFetchGameData(gameId)\r\n\r\n  /**\r\n   * Handles the back button click\r\n   */\r\n  const handleBack = () => {\r\n    history.goBack()\r\n  }\r\n\r\n  /**\r\n   * Handles the search button click\r\n   */\r\n  const handleSearch = () => {\r\n    history.push('/')\r\n  }\r\n\r\n  return (\r\n    <div className=\"Game\">\r\n      {gameData.isPending ? null : (\r\n        <>\r\n          <div className=\"GameBackIcon\" onClick={handleBack}>\r\n            <img src={leftArrow} alt=\"back icon\" />\r\n          </div>\r\n          <div className=\"GameSearchIcon\" onClick={handleSearch}>\r\n            <img src={searchIcon} alt=\"search icon\" />\r\n          </div>\r\n          <GameHeader\r\n            name={gameData.name}\r\n            platforms={gameData.platforms}\r\n            firstReleaseDate={gameData.firstReleaseDate}\r\n            backgroundScreenshot={\r\n              gameData.screenshots.concat(gameData.artworks)[\r\n                Math.floor(\r\n                  Math.random() *\r\n                    gameData.screenshots.concat(gameData.artworks).length\r\n                )\r\n              ]\r\n            }\r\n          />\r\n          <GameMedia\r\n            screenshots={gameData.screenshots}\r\n            artworks={gameData.artworks}\r\n          />\r\n          <GameContent\r\n            summary={gameData.summary}\r\n            storyline={gameData.storyLine}\r\n            developers={gameData.developers}\r\n            publishers={gameData.publishers}\r\n            websites={gameData.websites}\r\n            platforms={gameData.platforms}\r\n            releaseDates={gameData.releaseDates}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { useState } from 'react'\r\nimport { useHistory } from 'react-router'\r\nimport '../style/Landing.css'\r\n\r\n/**\r\n * Component displaying the landing page in the application\r\n * @returns the JSX element displaying the component\r\n */\r\nexport default function Landing(): JSX.Element {\r\n  const history = useHistory()\r\n  const [inputValue, setInputValue] = useState('')\r\n\r\n  /**\r\n   * Handles the change of the input string\r\n   * @param event the event associated to the change of the input element\r\n   */\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputValue(event.target.value)\r\n  }\r\n\r\n  /**\r\n   * Handles the submission of the form in the page\r\n   * @param event the event associated to the form element\r\n   */\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault()\r\n    history.push(`/searchResult/${inputValue}`)\r\n  }\r\n\r\n  return (\r\n    <div className=\"Landing\">\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"search your game here\"\r\n          value={inputValue}\r\n          onChange={handleChange}\r\n        />\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","import axios from 'axios'\r\nimport { useEffect, useState } from 'react'\r\nimport { searchGame } from '../api/GamesAPI'\r\n\r\n/**\r\n * Custom hook used to get the result of a search request associated to the given string\r\n * @param searchInput the string to search for with the request\r\n * @returns an object containing the results of the search request and a pending state\r\n */\r\nexport default function useFetchSearchResult(\r\n  searchInput: string\r\n): {\r\n  isPending: boolean\r\n  resultGames: {\r\n    id: number\r\n    name: string\r\n  }[]\r\n} {\r\n  const [isPending, setIsPending] = useState(true)\r\n  const [resultGames, setResultGames] = useState<\r\n    { id: number; name: string }[]\r\n  >([])\r\n\r\n  useEffect(() => {\r\n    const source = axios.CancelToken.source()\r\n    searchGame(searchInput, source.token)\r\n      .then((res) => {\r\n        setResultGames(res.data)\r\n        setIsPending(false)\r\n      })\r\n      .catch((error) => {\r\n        if (!axios.isCancel(error)) {\r\n          console.log(error)\r\n        }\r\n      })\r\n\r\n    return () => {\r\n      source.cancel('Operation canceled for cleanup')\r\n    }\r\n  })\r\n\r\n  return { isPending, resultGames }\r\n}\r\n","import { useHistory, useParams } from 'react-router-dom'\r\nimport searchIcon from '../assets/searchIcon.svg'\r\nimport useFetchSearchResult from '../hooks/useFetchSearchResult'\r\nimport '../style/SearchResult.css'\r\n\r\n/**\r\n * Defines the types of the SearchResult props\r\n */\r\ninterface ParamTypes {\r\n  searchInput: string\r\n}\r\n\r\n/**\r\n * Component displaying the search result page in the application\r\n * @returns the JSX element displaying the component\r\n */\r\nexport default function SearchResult(): JSX.Element {\r\n  const history = useHistory()\r\n  const { searchInput } = useParams<ParamTypes>()\r\n  const resultGames = useFetchSearchResult(searchInput)\r\n\r\n  /**\r\n   * Handles the search button click\r\n   */\r\n  const handleSearch = () => {\r\n    history.push('/')\r\n  }\r\n\r\n  /**\r\n   * Handles the click on a row of the result table\r\n   * @param gameId the game id associated to the table row\r\n   */\r\n  const handleRowClick = (gameId: number) => {\r\n    history.push(`/game/${gameId}`)\r\n  }\r\n\r\n  return (\r\n    <div className=\"SearchResult\">\r\n      {!resultGames.isPending && (\r\n        <>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Results</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {resultGames.resultGames.map((game) => {\r\n                return (\r\n                  <tr key={game.id} onClick={() => handleRowClick(game.id)}>\r\n                    <td>{game.name}</td>\r\n                  </tr>\r\n                )\r\n              })}\r\n            </tbody>\r\n          </table>\r\n          <div className=\"SearchResultSearchIcon\" onClick={handleSearch}>\r\n            <img src={searchIcon} alt=\"search icon\" />\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Game from './pages/Game'\nimport Landing from './pages/Landing'\nimport SearchResult from './pages/SearchResult'\n\n/**\n * Component displaying the application\n * @returns the JSX element displaying the component\n */\nfunction App(): JSX.Element {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/game/:gameId\">\n          <Game />\n        </Route>\n        <Route path=\"/searchResult/:searchInput\">\n          <SearchResult />\n        </Route>\n        <Route path=\"/\">\n          <Landing />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './style/index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}